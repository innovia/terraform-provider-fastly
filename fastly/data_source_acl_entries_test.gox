package fastly

import (
	"fmt"
	"net"
	"sort"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccFastlyACLEntries(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccFastlyACLEntriesConfig,
				Check: resource.ComposeTestCheckFunc(
					testAccFastlyACLEntries("data.fastly_acl_entries.some"),
				),
			},
		},
	})
}

func testAccFastlyACLEntries(n string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		r := s.RootModule().Resources[n]
		a := r.Primary.Attributes

		var (
			service_id string
			acl_id     string
			err        error
		)
		service_id = a["service_id.#"]
		var cidrBlocks sort.StringSlice = make([]string, cidrBlockSize)

		for i := range make([]string, cidrBlockSize) {

			block := a[fmt.Sprintf("cidr_blocks.%d", i)]

			if _, _, err := net.ParseCIDR(block); err != nil {
				return fmt.Errorf("malformed CIDR block %s: %s", block, err)
			}

			cidrBlocks[i] = block

		}

		if !sort.IsSorted(cidrBlocks) {
			return fmt.Errorf("unexpected order of cidr_blocks: %s", cidrBlocks)
		}

		var ipv6cidrBlocks sort.StringSlice = make([]string, ipv6cidrBlockSize)

		for j := range make([]string, ipv6cidrBlockSize) {

			block := a[fmt.Sprintf("ipv6_cidr_blocks.%d", j)]

			if _, _, err := net.ParseCIDR(block); err != nil {
				return fmt.Errorf("malformed CIDR block %s: %s", block, err)
			}

			ipv6cidrBlocks[j] = block
		}

		if !sort.IsSorted(ipv6cidrBlocks) {
			return fmt.Errorf("unexpected order of ipv6_cidr_blocks: %s", ipv6cidrBlocks)
		}

		return nil
	}
}

const testAccFastlyACLEntriesConfig = `
data "fastly_acl_entries" "some" {
}
`
